// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Room Component should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Room
    id={2}
    room={
      Object {
        "adults": 1,
        "checked": true,
        "children": 0,
      }
    }
    rooms={Object {}}
    setRoomEnabled={[Function]}
    updateAdults={[Function]}
    updateChildren={[Function]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "checked": true,
      "children": Array [
        <ForwardRef
          checked={true}
          id={2}
        >
          <input
            checked={true}
            name="room2enabled"
            onChange={[Function]}
            style={
              Object {
                "display": "inline",
              }
            }
            type="checkbox"
          />
          <span>
            Room 2
          </span>
        </ForwardRef>,
        <ForwardRef>
          <ForwardRef>
            <ForwardRef
              htmlFor="adults2"
            >
              Adults
              <br />
              (18+)
            </ForwardRef>
            <select
              disabled={false}
              id="adults2"
              onChange={[Function]}
              value={1}
            >
              <option
                value={1}
              >
                1
              </option>
              <option
                value={2}
              >
                2
              </option>
            </select>
          </ForwardRef>
          <ForwardRef>
            <ForwardRef
              htmlFor="children2"
            >
              Children
              <br />
              (0-17)
            </ForwardRef>
            <select
              disabled={false}
              id="children2"
              onChange={[Function]}
              value={0}
            >
              <option
                value={0}
              >
                0
              </option>
              <option
                value={1}
              >
                1
              </option>
              <option
                value={2}
              >
                2
              </option>
            </select>
          </ForwardRef>
        </ForwardRef>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "checked": true,
          "children": Array [
            <input
              checked={true}
              name="room2enabled"
              onChange={[Function]}
              style={
                Object {
                  "display": "inline",
                }
              }
              type="checkbox"
            />,
            <span>
              Room 2
            </span>,
          ],
          "id": 2,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "checked": true,
              "name": "room2enabled",
              "onChange": [Function],
              "style": Object {
                "display": "inline",
              },
              "type": "checkbox",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Room 2",
            },
            "ref": null,
            "rendered": "Room 2",
            "type": "span",
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bwzfXH",
            "isStatic": false,
            "rules": Array [
              "
  float: left;
  width: 100%;
  font-weight: bold;
  border-radius: 6px 6px 0 0;
  padding: 0 0 0 3px;
  background-color: ",
              [Function],
              ";
  span {
    display: inline-block;
    padding: ",
              [Function],
              ";
  }
",
            ],
          },
          "displayName": "styled.legend",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bwzfXH",
          "target": "legend",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef>
              <ForwardRef
                htmlFor="adults2"
              >
                Adults
                <br />
                (18+)
              </ForwardRef>
              <select
                disabled={false}
                id="adults2"
                onChange={[Function]}
                value={1}
              >
                <option
                  value={1}
                >
                  1
                </option>
                <option
                  value={2}
                >
                  2
                </option>
              </select>
            </ForwardRef>,
            <ForwardRef>
              <ForwardRef
                htmlFor="children2"
              >
                Children
                <br />
                (0-17)
              </ForwardRef>
              <select
                disabled={false}
                id="children2"
                onChange={[Function]}
                value={0}
              >
                <option
                  value={0}
                >
                  0
                </option>
                <option
                  value={1}
                >
                  1
                </option>
                <option
                  value={2}
                >
                  2
                </option>
              </select>
            </ForwardRef>,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef
                  htmlFor="adults2"
                >
                  Adults
                  <br />
                  (18+)
                </ForwardRef>,
                <select
                  disabled={false}
                  id="adults2"
                  onChange={[Function]}
                  value={1}
                >
                  <option
                    value={1}
                  >
                    1
                  </option>
                  <option
                    value={2}
                  >
                    2
                  </option>
                </select>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    "Adults",
                    <br />,
                    "(18+)",
                  ],
                  "htmlFor": "adults2",
                },
                "ref": null,
                "rendered": Array [
                  "Adults",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  "(18+)",
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ifAKCX",
                    "isStatic": true,
                    "rules": Array [
                      "
  display: block;
  margin-bottom: 4px;
",
                    ],
                  },
                  "displayName": "styled.label",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-ifAKCX",
                  "target": "label",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <option
                      value={1}
                    >
                      1
                    </option>,
                    <option
                      value={2}
                    >
                      2
                    </option>,
                  ],
                  "disabled": false,
                  "id": "adults2",
                  "onChange": [Function],
                  "value": 1,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "1",
                      "value": 1,
                    },
                    "ref": null,
                    "rendered": "1",
                    "type": "option",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "2",
                      "value": 2,
                    },
                    "ref": null,
                    "rendered": "2",
                    "type": "option",
                  },
                ],
                "type": "select",
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bxivhb",
                "isStatic": true,
                "rules": Array [
                  "
  display: inline-block;
  margin-right: 10px;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bxivhb",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef
                  htmlFor="children2"
                >
                  Children
                  <br />
                  (0-17)
                </ForwardRef>,
                <select
                  disabled={false}
                  id="children2"
                  onChange={[Function]}
                  value={0}
                >
                  <option
                    value={0}
                  >
                    0
                  </option>
                  <option
                    value={1}
                  >
                    1
                  </option>
                  <option
                    value={2}
                  >
                    2
                  </option>
                </select>,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": Array [
                    "Children",
                    <br />,
                    "(0-17)",
                  ],
                  "htmlFor": "children2",
                },
                "ref": null,
                "rendered": Array [
                  "Children",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {},
                    "ref": null,
                    "rendered": null,
                    "type": "br",
                  },
                  "(0-17)",
                ],
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "attrs": Array [],
                  "componentStyle": ComponentStyle {
                    "componentId": "sc-ifAKCX",
                    "isStatic": true,
                    "rules": Array [
                      "
  display: block;
  margin-bottom: 4px;
",
                    ],
                  },
                  "displayName": "styled.label",
                  "foldedComponentIds": Array [],
                  "render": [Function],
                  "styledComponentId": "sc-ifAKCX",
                  "target": "label",
                  "toString": [Function],
                  "warnTooManyClasses": [Function],
                  "withComponent": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    <option
                      value={0}
                    >
                      0
                    </option>,
                    <option
                      value={1}
                    >
                      1
                    </option>,
                    <option
                      value={2}
                    >
                      2
                    </option>,
                  ],
                  "disabled": false,
                  "id": "children2",
                  "onChange": [Function],
                  "value": 0,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "0",
                      "value": 0,
                    },
                    "ref": null,
                    "rendered": "0",
                    "type": "option",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "1",
                      "value": 1,
                    },
                    "ref": null,
                    "rendered": "1",
                    "type": "option",
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": "2",
                      "value": 2,
                    },
                    "ref": null,
                    "rendered": "2",
                    "type": "option",
                  },
                ],
                "type": "select",
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-bxivhb",
                "isStatic": true,
                "rules": Array [
                  "
  display: inline-block;
  margin-right: 10px;
",
                ],
              },
              "displayName": "styled.div",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-bxivhb",
              "target": "div",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-bdVaJa",
            "isStatic": true,
            "rules": Array [
              "
  padding: 25px 0 6px 6px;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-bdVaJa",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-htpNat",
        "isStatic": false,
        "rules": Array [
          "
  border: 2px solid ",
          [Function],
          ";
  background-color: ",
          [Function],
          ";
  display: inline-block;
  max-width: 110px;
  font-size: 0.6em;
  border-radius: 8px;
  padding: 0;
",
        ],
      },
      "displayName": "styled.fieldset",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-htpNat",
      "target": "fieldset",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "checked": true,
        "children": Array [
          <ForwardRef
            checked={true}
            id={2}
          >
            <input
              checked={true}
              name="room2enabled"
              onChange={[Function]}
              style={
                Object {
                  "display": "inline",
                }
              }
              type="checkbox"
            />
            <span>
              Room 2
            </span>
          </ForwardRef>,
          <ForwardRef>
            <ForwardRef>
              <ForwardRef
                htmlFor="adults2"
              >
                Adults
                <br />
                (18+)
              </ForwardRef>
              <select
                disabled={false}
                id="adults2"
                onChange={[Function]}
                value={1}
              >
                <option
                  value={1}
                >
                  1
                </option>
                <option
                  value={2}
                >
                  2
                </option>
              </select>
            </ForwardRef>
            <ForwardRef>
              <ForwardRef
                htmlFor="children2"
              >
                Children
                <br />
                (0-17)
              </ForwardRef>
              <select
                disabled={false}
                id="children2"
                onChange={[Function]}
                value={0}
              >
                <option
                  value={0}
                >
                  0
                </option>
                <option
                  value={1}
                >
                  1
                </option>
                <option
                  value={2}
                >
                  2
                </option>
              </select>
            </ForwardRef>
          </ForwardRef>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "checked": true,
            "children": Array [
              <input
                checked={true}
                name="room2enabled"
                onChange={[Function]}
                style={
                  Object {
                    "display": "inline",
                  }
                }
                type="checkbox"
              />,
              <span>
                Room 2
              </span>,
            ],
            "id": 2,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "checked": true,
                "name": "room2enabled",
                "onChange": [Function],
                "style": Object {
                  "display": "inline",
                },
                "type": "checkbox",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Room 2",
              },
              "ref": null,
              "rendered": "Room 2",
              "type": "span",
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bwzfXH",
              "isStatic": false,
              "rules": Array [
                "
  float: left;
  width: 100%;
  font-weight: bold;
  border-radius: 6px 6px 0 0;
  padding: 0 0 0 3px;
  background-color: ",
                [Function],
                ";
  span {
    display: inline-block;
    padding: ",
                [Function],
                ";
  }
",
              ],
            },
            "displayName": "styled.legend",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bwzfXH",
            "target": "legend",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef>
                <ForwardRef
                  htmlFor="adults2"
                >
                  Adults
                  <br />
                  (18+)
                </ForwardRef>
                <select
                  disabled={false}
                  id="adults2"
                  onChange={[Function]}
                  value={1}
                >
                  <option
                    value={1}
                  >
                    1
                  </option>
                  <option
                    value={2}
                  >
                    2
                  </option>
                </select>
              </ForwardRef>,
              <ForwardRef>
                <ForwardRef
                  htmlFor="children2"
                >
                  Children
                  <br />
                  (0-17)
                </ForwardRef>
                <select
                  disabled={false}
                  id="children2"
                  onChange={[Function]}
                  value={0}
                >
                  <option
                    value={0}
                  >
                    0
                  </option>
                  <option
                    value={1}
                  >
                    1
                  </option>
                  <option
                    value={2}
                  >
                    2
                  </option>
                </select>
              </ForwardRef>,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef
                    htmlFor="adults2"
                  >
                    Adults
                    <br />
                    (18+)
                  </ForwardRef>,
                  <select
                    disabled={false}
                    id="adults2"
                    onChange={[Function]}
                    value={1}
                  >
                    <option
                      value={1}
                    >
                      1
                    </option>
                    <option
                      value={2}
                    >
                      2
                    </option>
                  </select>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "Adults",
                      <br />,
                      "(18+)",
                    ],
                    "htmlFor": "adults2",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Adults",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": "br",
                    },
                    "(18+)",
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": true,
                      "rules": Array [
                        "
  display: block;
  margin-bottom: 4px;
",
                      ],
                    },
                    "displayName": "styled.label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": "label",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option
                        value={1}
                      >
                        1
                      </option>,
                      <option
                        value={2}
                      >
                        2
                      </option>,
                    ],
                    "disabled": false,
                    "id": "adults2",
                    "onChange": [Function],
                    "value": 1,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "1",
                        "value": 1,
                      },
                      "ref": null,
                      "rendered": "1",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "2",
                        "value": 2,
                      },
                      "ref": null,
                      "rendered": "2",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": true,
                  "rules": Array [
                    "
  display: inline-block;
  margin-right: 10px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef
                    htmlFor="children2"
                  >
                    Children
                    <br />
                    (0-17)
                  </ForwardRef>,
                  <select
                    disabled={false}
                    id="children2"
                    onChange={[Function]}
                    value={0}
                  >
                    <option
                      value={0}
                    >
                      0
                    </option>
                    <option
                      value={1}
                    >
                      1
                    </option>
                    <option
                      value={2}
                    >
                      2
                    </option>
                  </select>,
                ],
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": Array [
                      "Children",
                      <br />,
                      "(0-17)",
                    ],
                    "htmlFor": "children2",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Children",
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {},
                      "ref": null,
                      "rendered": null,
                      "type": "br",
                    },
                    "(0-17)",
                  ],
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-ifAKCX",
                      "isStatic": true,
                      "rules": Array [
                        "
  display: block;
  margin-bottom: 4px;
",
                      ],
                    },
                    "displayName": "styled.label",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-ifAKCX",
                    "target": "label",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      <option
                        value={0}
                      >
                        0
                      </option>,
                      <option
                        value={1}
                      >
                        1
                      </option>,
                      <option
                        value={2}
                      >
                        2
                      </option>,
                    ],
                    "disabled": false,
                    "id": "children2",
                    "onChange": [Function],
                    "value": 0,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "0",
                        "value": 0,
                      },
                      "ref": null,
                      "rendered": "0",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "1",
                        "value": 1,
                      },
                      "ref": null,
                      "rendered": "1",
                      "type": "option",
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "host",
                      "props": Object {
                        "children": "2",
                        "value": 2,
                      },
                      "ref": null,
                      "rendered": "2",
                      "type": "option",
                    },
                  ],
                  "type": "select",
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "attrs": Array [],
                "componentStyle": ComponentStyle {
                  "componentId": "sc-bxivhb",
                  "isStatic": true,
                  "rules": Array [
                    "
  display: inline-block;
  margin-right: 10px;
",
                  ],
                },
                "displayName": "styled.div",
                "foldedComponentIds": Array [],
                "render": [Function],
                "styledComponentId": "sc-bxivhb",
                "target": "div",
                "toString": [Function],
                "warnTooManyClasses": [Function],
                "withComponent": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-bdVaJa",
              "isStatic": true,
              "rules": Array [
                "
  padding: 25px 0 6px 6px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-bdVaJa",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-htpNat",
          "isStatic": false,
          "rules": Array [
            "
  border: 2px solid ",
            [Function],
            ";
  background-color: ",
            [Function],
            ";
  display: inline-block;
  max-width: 110px;
  font-size: 0.6em;
  border-radius: 8px;
  padding: 0;
",
          ],
        },
        "displayName": "styled.fieldset",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-htpNat",
        "target": "fieldset",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
